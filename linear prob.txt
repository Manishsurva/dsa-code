class Record:
    def __init__(self):
        self._name = None
        self._number = None

    def get_name(self):
        return self._name

    def get_number(self):
        return self._number

    def set_name(self, name):
        self._name = name

    def set_number(self, number):
        self._number = number

    def __str__(self):
        record = "Name: " + str(self.get_name()) + "\t" + "\tNumber: " + str(self.get_number())
        return record


class hashTable:
    def __init__(self, size):
        self.size = size
        self.table = [None] * self.size
        self.elementCount = 0

    def isFull(self):
        return self.elementCount == self.size

    def hashFunction(self, element):
        return element % self.size

    def insert(self, record):
        if self.isFull():
            print("Hash Table Full")
            return False

        position = self.hashFunction(record.get_number())

        if self.table[position] is None:
            self.table[position] = record
            print("Phone number of " + record.get_name() + " is at position " + str(position))
            self.elementCount += 1
        else:
            print("Collision has occurred for " + record.get_name() + "'s phone number at position " + str(position) + " finding new Position.")
            while self.table[position] is not None:
                position += 1
                if position >= self.size:
                    position = 0
            self.table[position] = record
            print("Phone number of " + record.get_name() + " is at position " + str(position))
            self.elementCount += 1
        return True

    def search(self, record):
        position = self.hashFunction(record.get_number())
        comparisons = 1

        if self.table[position] is not None and self.table[position].get_name() == record.get_name() and self.table[position].get_number() == record.get_number():
            print("Phone number found at position {} and total comparisons are {}".format(position, comparisons))
            return position

        while self.table[position] is not None and comparisons <= self.size:
            position += 1
            if position >= self.size:
                position = 0
            if self.table[position] is not None and self.table[position].get_name() == record.get_name() and self.table[position].get_number() == record.get_number():
                print("Phone number found at position {} and total comparisons are {}".format(position, comparisons + 1))
                return position
            comparisons += 1

        print("Record not found")
        return None

    def display(self):
        print("\n")
        for i in range(self.size):
            print("Hash Value: " + str(i) + "\t\t" + str(self.table[i]))

        print("The number of phonebook records in the Table are : " + str(self.elementCount))


if __name__ == "__main__":
    size = int(input("Enter the Size of the hash table : "))
    ht = hashTable(size)
    for _ in range(size):
        record = Record()
        record.set_name(input("Enter Name: "))
        record.set_number(int(input("Enter Phone Number: ")))
        ht.insert(record)
    ht.display()
